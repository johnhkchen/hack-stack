---
import BusinessCard from './BusinessCard.astro';
import NeighborhoodGrouping from './NeighborhoodGrouping.astro';

export interface Props {
  enableNeighborhoodGrouping?: boolean;
  enableFiltering?: boolean;
  limit?: number;
}

const { enableNeighborhoodGrouping = true, enableFiltering = true, limit = 10 } = Astro.props;

// Fetch business data during SSR
let businesses = [];
let error = null;
let debugInfo = null;

// Determine the correct API base URL based on environment
const apiBaseUrl = import.meta.env.SSR ? 'http://backend:8000' : '';
const apiUrl = `${apiBaseUrl}/api/businesses?limit=${limit}`;

try {
  console.log(`Attempting to fetch from: ${apiUrl}`);
  const response = await fetch(apiUrl, {
    signal: AbortSignal.timeout(3000) // 3 second timeout
  });
  
  debugInfo = {
    url: apiUrl,
    status: response.status,
    statusText: response.statusText,
    headers: Object.fromEntries(response.headers.entries()),
    ok: response.ok
  };
  
  if (response.ok) {
    const data = await response.json();
    // Handle both direct array and wrapped object response formats
    businesses = Array.isArray(data) ? data : (data.businesses || []);
    console.log(`Successfully fetched ${businesses.length} businesses`);
  } else {
    const errorText = await response.text();
    error = `HTTP ${response.status}: ${response.statusText}`;
    debugInfo.errorBody = errorText;
    console.error('Backend error response:', debugInfo);
  }
} catch (err) {
  error = `Connection failed: ${err.message}`;
  debugInfo = {
    url: apiUrl,
    error: err.message,
    stack: err.stack,
    type: err.constructor.name
  };
  console.error('Frontend connection error:', debugInfo);
}
---

<div class="business-list">
  {error ? (
    <div class="error-state">
      <p><strong>Unable to load businesses:</strong> {error}</p>
      <p><small>Backend connectivity issue detected.</small></p>
      {debugInfo && (
        <details class="debug-info">
          <summary>Debug Information</summary>
          <pre><code>{JSON.stringify(debugInfo, null, 2)}</code></pre>
        </details>
      )}
    </div>
  ) : businesses.length === 0 ? (
    <div class="empty-state">
      <p>No businesses found.</p>
    </div>
  ) : enableNeighborhoodGrouping ? (
    <NeighborhoodGrouping 
      businesses={businesses} 
      groupByNeighborhood={true}
      enableFiltering={enableFiltering}
    />
  ) : (
    <div class="business-list-simple">
      {businesses.map((business, index) => (
        <BusinessCard 
          business={business}
        />
      ))}
    </div>
  )}
</div>

<style>
  .business-list-simple {
    display: flex;
    flex-direction: column;
    gap: var(--pico-spacing);
  }
</style>


