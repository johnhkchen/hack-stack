---
// Fetch business data during SSR
let businesses = [];
let error = null;
let debugInfo = null;

// Determine the correct API base URL based on environment
const apiBaseUrl = import.meta.env.SSR ? 'http://backend:8000' : '';
const apiUrl = `${apiBaseUrl}/api/businesses?limit=5`;

try {
  console.log(`Attempting to fetch from: ${apiUrl}`);
  const response = await fetch(apiUrl, {
    signal: AbortSignal.timeout(3000) // 3 second timeout
  });
  
  debugInfo = {
    url: apiUrl,
    status: response.status,
    statusText: response.statusText,
    headers: Object.fromEntries(response.headers.entries()),
    ok: response.ok
  };
  
  if (response.ok) {
    const data = await response.json();
    // Handle both direct array and wrapped object response formats
    businesses = Array.isArray(data) ? data : (data.businesses || []);
    console.log(`Successfully fetched ${businesses.length} businesses`);
  } else {
    const errorText = await response.text();
    error = `HTTP ${response.status}: ${response.statusText}`;
    debugInfo.errorBody = errorText;
    console.error('Backend error response:', debugInfo);
  }
} catch (err) {
  error = `Connection failed: ${err.message}`;
  debugInfo = {
    url: apiUrl,
    error: err.message,
    stack: err.stack,
    type: err.constructor.name
  };
  console.error('Frontend connection error:', debugInfo);
}
---

<div class="business-list">
  {error ? (
    <div class="error-state">
      <p><strong>Unable to load businesses:</strong> {error}</p>
      <p><small>Backend connectivity issue detected.</small></p>
      {debugInfo && (
        <details class="debug-info">
          <summary>Debug Information</summary>
          <pre><code>{JSON.stringify(debugInfo, null, 2)}</code></pre>
        </details>
      )}
    </div>
  ) : businesses.length === 0 ? (
    <div class="empty-state">
      <p>No businesses found.</p>
    </div>
  ) : (
    <div class="business-grid">
      {businesses.map(business => (
        <article class="business-card">
          <header>
            <h3>{business.name}</h3>
            <p class="tagline">{business.tagline}</p>
          </header>
          <div class="business-details">
            <p><strong>Type:</strong> {business.type}</p>
            <p><strong>Neighborhood:</strong> {business.neighborhood}</p>
            <p><strong>Founded:</strong> {business.founded}</p>
            <p><strong>Status:</strong> {business.status}</p>
          </div>
          {business.story && (
            <footer>
              <p class="description">{business.story}</p>
            </footer>
          )}
          {business.features && business.features.length > 0 && (
            <div class="features">
              <strong>Features:</strong>
              <ul>
                {business.features.map(feature => (
                  <li>{feature}</li>
                ))}
              </ul>
            </div>
          )}
        </article>
      ))}
    </div>
  )}
</div>

<style>
  .business-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .business-card {
    border: 1px solid var(--pico-border-color);
    border-radius: var(--pico-border-radius);
    padding: 1.5rem;
    background: var(--pico-card-background-color);
  }

  .business-card h3 {
    margin: 0 0 0.5rem 0;
    color: var(--pico-primary);
  }

  .tagline {
    color: var(--pico-muted-color);
    font-style: italic;
    margin: 0 0 1rem 0;
  }

  .business-details {
    margin: 1rem 0;
  }

  .business-details p {
    margin: 0.25rem 0;
    font-size: 0.9rem;
  }

  .description {
    font-size: 0.9rem;
    color: var(--pico-muted-color);
    margin: 0;
  }

  .features {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid var(--pico-border-color);
  }

  .features ul {
    margin: 0.5rem 0 0 0;
    padding-left: 1.5rem;
  }

  .features li {
    font-size: 0.875rem;
    color: var(--pico-muted-color);
    margin-bottom: 0.25rem;
  }

  .error-state, .empty-state {
    text-align: center;
    padding: 2rem;
    color: var(--pico-muted-color);
  }

  .error-state {
    color: var(--pico-del-color);
  }
</style>